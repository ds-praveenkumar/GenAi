"""
DSPy is used for introducing a programming model that includes three main components: signatures, modules, and teleprompters.

Signatures: These are concise, natural-language function declarations that specify what a text transformation should achieve. Signatures allow you to tell the LM what it needs to do, rather than specify how we should ask the LM to do it. Thus, they abstract away the specifics of prompt construction, making the process more flexible and robust.
Modules: These are building blocks that replace hand-crafted prompts. They can be composed into larger pipelines, allowing for more complex and adaptable language model programs.
Optimizers (formerly Teleprompters): These tools optimize the prompts generated by the modules, improving performance and accuracy in much the same way as machine learning models are fine-tuned.
"""
import dspy

# Question Answering
sig_1 = dspy.Signature("question -> answer")

# Sentiment Classification
sig_2 = dspy.Signature("sentence -> sentiment")

# Summarization
sig_3 = dspy.Signature("document -> summary")

# Retrieval-Augmented Question Answering
sig_4 = dspy.Signature("context, question -> answer")

# Multiple-Choice Question Answering with Reasoning
sig_5 = dspy.Signature("question, choices -> reasoning, selection")


# class based dspy
class BasicQA(dspy.Signature):
  """Answer questions with short factoid answers"""

  question = dspy.InputField()
  answer = dspy.OutputField(desc="often between 1 and 5 words",
                            prefix="Question's Answer:")
  
generate_response = dspy.Predict(BasicQA)
pred = generate_response(question="In which year did India win their first ICC T20 World Cup?")
print(f"Answer: {pred.answer}")

"""
Diverse Modules:

dspy.Predict: Basic predictor that does not modify the signature.
dspy.ChainOfThought: Promotes step-by-step reasoning before producing a response.
dspy.ProgramOfThought: Generates code whose execution dictates the response.
dspy.ReAct: Uses tools to implement the given signature.
dspy.MultiChainComparison: Compares multiple outputs from ChainOfThought for a final prediction.

"""

class RAGSignature(dspy.Signature):
      """
      Given a context and question, answer the question.
      """
      context = dspy.InputField()
      question = dspy.InputField()
      answer = dspy.OutputField()
    
class RAG(dspy.Module) :
      def __init__ ( self , num_passages=3) :
          super().__init__()
          # Retrieve will use default retrieval settings unless overridden
          self.retrieve = dspy.Retrieve(k=num_passages)

          # CoT signature that generates answers given retrieval context & question
          self.generate_answer = dspy.ChainOfThought(RAGSignature)

       def forward (self, question) :
           context = self.retrieve (question).passages
           return self.generate_answer(context=context, question=question)